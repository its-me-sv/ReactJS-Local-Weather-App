{"version":3,"sources":["redux/weather/weather.types.js","components/display-box/display-box.component.jsx","containers/app.container.jsx","redux/weather/weather.actions.js","redux/weather/weather.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["WeatherActionTypes","WEATHER_FETCH_PENDING","WEATHER_FETCH_SUCCESS","WEATHER_FETCH_FAILED","DisplayBox","weatherData","toggleCelsius","isCelsius","climate","weather","main","icon","celsius","temp","fahra","country","sys","name","className","title","onClick","src","alt","App","props","setState","state","lat","long","options","enableHighAccuracy","maximumAge","timeout","Infinity","navigator","geolocation","watchPosition","position","window","alert","coords","latitude","longitude","console","log","getCurrentPosition","onRequestWeatherData","this","isPending","error","React","Component","connect","fetchedData","dispatch","lng","type","fetch","then","response","json","data","payload","catch","message","requestWeatherData","INITIAL_STATE","weatherReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAMeA,EANY,CACvBC,sBAAuB,wBACvBC,sBAAuB,wBACvBC,qBAAsB,wB,qBCkBXC,EAjBI,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UACzCC,EAAUH,EAAYI,QAAQ,GAAGC,KACjCC,EAAON,EAAYI,QAAQ,GAAGE,KAC9BC,EAAUP,EAAYK,KAAKG,KAC3BC,EAAmB,IAAVF,EAAiB,GAC1BG,EAAUV,EAAYW,IAAID,QAC1BE,EAAOZ,EAAYY,KACvB,OACI,sBAAKC,UAAU,wBAAf,UACI,+BAAKD,EAAL,KAAaF,KACb,+BAAKR,EAAYK,EAAUE,EAA3B,IAAkC,sBAAMK,MAAM,cAAcC,QAASd,EAAnC,SAAmDC,EAAY,IAAM,SACvG,6BAAKC,IACL,qBAAKa,IAAKV,EAAMW,IAAI,qBCP1BC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiCVlB,cAAgB,WACZ,EAAKmB,SAAS,CAAClB,WAAY,EAAKmB,MAAMnB,aAjCtC,EAAKmB,MAAQ,CACTnB,WAAW,EACXoB,IAAK,EACLC,KAAM,GALK,E,qDASnB,WAAqB,IAAD,OAShB,IAAMC,EAAU,CACZC,oBAAoB,EACpBC,WAAY,EACZC,QAASC,KAGbC,UAAUC,YAAYC,eAdtB,SAAiBC,GACbC,OAAOC,MAAMF,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,cAG3D,WACIC,QAAQC,IAAI,mCASoCf,GACpDK,UAAUC,YAAYU,oBAAmB,SAAAR,IAErCS,EAD+B,EAAKtB,MAA7BsB,sBAEHT,EAASG,OAAOC,SAChBJ,EAASG,OAAOE,gB,oBAS5B,WACI,MAAwCK,KAAKvB,MAAtCwB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,MAAO5C,EAAzB,EAAyBA,YACzB,OACI,sBAAKa,UAAU,YAAf,UACI,oDAEgB,IAAZ8B,IAA6B,IAARC,EACf,cAAC,EAAD,CACE1C,UAAWwC,KAAKrB,MAAMnB,UACtBD,cAAeyC,KAAKzC,cACpBD,YAAaA,IAEf,Y,GAnDR6C,IAAMC,WAoETC,eAVS,SAAC,GAAD,IAAE3C,EAAF,EAAEA,QAAF,MAAgB,CACpCJ,YAAaI,EAAQ4C,YACrBL,UAAWvC,EAAQuC,UACnBC,MAAOxC,EAAQwC,UAGQ,SAAAK,GAAQ,MAAK,CACpCR,qBAAsB,SAACnB,EAAK4B,GAAN,OAAcD,ECxEN,SAAC3B,EAAK4B,GAAN,OAAc,SAAAD,GAC5CA,EAAS,CAACE,KAAMxD,EAAmBC,wBACnCwD,MAAM,4DAAD,OAA6D9B,EAA7D,gBAAwE4B,IAC5EG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIP,EAAS,CAACE,KAAMxD,EAAmBE,sBAAuB4D,QAASD,OAChFE,OAAM,SAAAd,GAAK,OAAIK,EAAS,CAACE,KAAMxD,EAAmBG,qBAAsB2D,QAASb,EAAMe,cDmE3CC,CAAmBtC,EAAK4B,QAG1DH,CAGb7B,G,sBE9EI2C,EAAgB,CAClBb,YAAa,KACbJ,MAAO,KACPD,UAAW,MAgBAmB,EAbQ,WAAyC,IAAxCzC,EAAuC,uDAA/BwC,EAAeE,EAAgB,uDAAP,GACpD,OAAQA,EAAOZ,MACX,KAAKxD,EAAmBC,sBACpB,OAAO,2BAAIyB,GAAU,CAACsB,WAAW,IACrC,KAAKhD,EAAmBE,sBACpB,OAAO,2BAAKwB,GAAU,CAAEsB,WAAW,EAAOC,OAAO,EAAOI,YAAae,EAAON,UAChF,KAAK9D,EAAmBG,qBACpB,OAAO,2BAAIuB,GAAU,CAACsB,WAAW,EAAOC,MAAOmB,EAAON,UAC1D,QACI,OAAOpC,ICTJ2C,EAJKC,YAAgB,CAChC7D,QAAS0D,ICAAI,EAAQC,YAAYH,EAAaI,YAAgBC,MCE9DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.62a28bd9.chunk.js","sourcesContent":["const WeatherActionTypes = {\r\n    WEATHER_FETCH_PENDING: 'WEATHER_FETCH_PENDING',\r\n    WEATHER_FETCH_SUCCESS: 'WEATHER_FETCH_SUCCESS',\r\n    WEATHER_FETCH_FAILED: 'WEATHER_FETCH_FAILED'\r\n};\r\n\r\nexport default WeatherActionTypes;","import React from 'react';\r\n\r\nimport './display-box.styles.css';\r\n\r\nconst DisplayBox = ({weatherData, toggleCelsius, isCelsius}) => {\r\n    let climate = weatherData.weather[0].main;\r\n    let icon = weatherData.weather[0].icon;\r\n    let celsius = weatherData.main.temp;\r\n    let fahra = (celsius * 1.8) + 32;\r\n    let country = weatherData.sys.country;\r\n    let name = weatherData.name;\r\n    return (\r\n        <div className=\"display-box-container\">\r\n            <h2>{name}, {country}</h2>\r\n            <h2>{isCelsius ? celsius : fahra} <span title=\"Toggle Unit\" onClick={toggleCelsius}>{isCelsius ? \"C\" : \"F\"}</span></h2>\r\n            <h2>{climate}</h2>\r\n            <img src={icon} alt=\"climate icon\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayBox;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {requestWeatherData} from '../redux/weather/weather.actions';\r\n\r\nimport './app.styles.css';\r\n\r\nimport DisplayBox from '../components/display-box/display-box.component';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isCelsius: true,\r\n            lat: 0.0,\r\n            long: 0.0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        function success(position) {\r\n            window.alert(position.coords.latitude, position.coords.longitude);\r\n        }\r\n\r\n        function error() {\r\n            console.log('Sorry, no position available.');\r\n        }\r\n\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: Infinity\r\n        };\r\n\r\n        navigator.geolocation.watchPosition(success, error, options);\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const {onRequestWeatherData} = this.props;\r\n            onRequestWeatherData(\r\n                position.coords.latitude,\r\n                position.coords.longitude\r\n            );\r\n        });\r\n    }\r\n\r\n    toggleCelsius = () => {\r\n        this.setState({isCelsius: !this.state.isCelsius});\r\n    }\r\n\r\n    render() {\r\n        const {isPending, error, weatherData} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Local Weather App</h1>\r\n                {\r\n                    isPending===false && error===false\r\n                        ? <DisplayBox \r\n                            isCelsius={this.state.isCelsius}\r\n                            toggleCelsius={this.toggleCelsius}\r\n                            weatherData={weatherData}\r\n                          />\r\n                        : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({weather}) => ({\r\n    weatherData: weather.fetchedData,\r\n    isPending: weather.isPending,\r\n    error: weather.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRequestWeatherData: (lat, lng) => dispatch(requestWeatherData(lat, lng))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","import WeatherActionTypes from \"./weather.types\";\r\n\r\nexport const requestWeatherData = (lat, lng) => dispatch => {\r\n    dispatch({type: WeatherActionTypes.WEATHER_FETCH_PENDING});\r\n    fetch(`https://weather-proxy.freecodecamp.rocks/api/current?lat=${lat}&lon=${lng}`)\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: WeatherActionTypes.WEATHER_FETCH_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: WeatherActionTypes.WEATHER_FETCH_FAILED, payload: error.message}));\r\n};","import WeatherActionTypes from \"./weather.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    fetchedData: null,\r\n    error: null,\r\n    isPending: null\r\n};\r\n\r\nconst weatherReducer = (state = INITIAL_STATE, action = {}) => {\r\n    switch (action.type) {\r\n        case WeatherActionTypes.WEATHER_FETCH_PENDING:\r\n            return {...state, ...{isPending: true}};\r\n        case WeatherActionTypes.WEATHER_FETCH_SUCCESS:\r\n            return { ...state, ...{ isPending: false, error: false, fetchedData: action.payload}};\r\n        case WeatherActionTypes.WEATHER_FETCH_FAILED:\r\n            return {...state, ...{isPending: false, error: action.payload}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default weatherReducer;","import {combineReducers} from 'redux';\r\n\r\nimport weatherReducer from './weather/weather.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app.container';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}